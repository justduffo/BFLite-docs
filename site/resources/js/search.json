[[{"i":"welcome","l":"\uD83D\uDC4BWelcome","p":["ℹ️ If there is anything not answered by the documentation, feel free to ask on the Discord Server where you can get support."]},{"l":"Welcome to the BFLite Framework Docs","p":["BFLite is a plug-and-play Unreal Engine framework that lets you build complete first-person games without writing a single line of code.","Whether you're new to Unreal Engine or an experienced developer looking to prototype quickly, BFLite gives you a clean foundation with powerful, ready-to-use systems like:","A fully functional Main Menu + Pause Menu","An intuitive Interaction system","A smooth Flashlight system","Built-in Footstep audio and material detection","Toggleable Lightswitch system","Flexible Item & Note inspection system","A powerful Event Maker that lets you control actors, lights, doors, and sounds","✅ Create a project using BFLite like you would any other Unreal template — no setup or plugins required."]},{"i":"whats-in-the-docs","l":"What’s in the Docs?","p":["We’ll walk through how each major system works so you can focus on building your game. Here’s what you’ll find:","Setup: How to create a project using BFLite","Core Systems: Detailed explanations of each framework feature","Customization (optional): Small tweaks you can make if desired","Let’s get started →"]}],[{"i":"changelogs","l":"\uD83D\uDCC3Changelogs"},{"i":"version-12","l":"Version 1.2","p":["Fixed an issue where doors could be spammed open repeatedly.","Added a key system for locked doors.","Added FPS counter","Improved movement and camera behavior to feel more realistic.","Added a new, smoother animation for the inspection system.","Reworked the menu system to make level editing easier for your own game.","Tweaked the interaction system to improve reliability.","Updated default UI elements to better match the framework’s style.","Removed unused items to clean up the project","\uD83D\uDCAC Having issues after this update or missing a feature let us know: Discord Server"]}],[{"l":"Setting Up BFLite","p":["Getting started with BFLite is as easy as creating a new Unreal Engine project. No extra plugins, installations, or configurations are required."]},{"i":"how-to-start-a-new-project","l":"✅ How to Start a New Project","p":["Open the Epic Games Launcher","Go to the Unreal Engine tab","Click \"Create Project\"","Select the BFLite Framework template (if installed)","Choose your project location and name","Click Create","Your new project is now ready to go."]},{"i":"requirements","l":"\uD83D\uDEE0️ Requirements","p":["ℹ️ The framework is made using 5.4 if you have issues on lower versions make sure to reach out","Unreal Engine 5.0 or higher","Windows (recommended)","BFLite is built using Blueprints only, so no C++ setup is required."]},{"i":"folder-structure-brief-overview","l":"\uD83D\uDCE6 Folder Structure (Brief Overview)","p":["When your project opens, you’ll see organized folders for:","Blueprints/– Main gameplay systems","UI/– Menus and HUD elements","Sounds/– Alle sounds used for the framework","Maps/– Demo map + Menu","Meshes/- meshes that are included in the framework","Texture/materials/ used for the included meshes","We'll go over each system in more detail in the next sections.","\uD83D\uDCAC Need help installing or don’t see the BFLite template? Join the Discord Server and we’ll help you get set up!"]}],[{"l":"Menu System","p":["BFLite includes a fully functional Main Menu system that loads at the start of the game and saves your settings. It is designed to be easy and modular so you can add new settings or rework the menu without too much effort, a video tutorial is in the works to show you all the ins and outs to design the menu other than the provided template"]},{"i":"menu-overview","l":"\uD83E\uDDED Menu Overview","p":["By default, the main menu includes:","Start Game","Settings(currently placeholder, ready for extension)","Credits","Quit Game","The menu is launched automatically when the Demo_MenuLevel is loaded."]},{"i":"how-it-works-behind-the-scenes","l":"\uD83E\uDDE0 How It Works (Behind the Scenes)","p":["When the menu level loads:","A Menu Camera is set as the player’s view","A menu sound is played","The WB_Menu widget is created and added to the screen","The mouse cursor is shown","Logic is handled via the custom Player Controller: BP_PC_Menu","If you use your own custom level, make sure to:","Set the GameMode to GM_Menu","Add this same logic to your level blueprint"]},{"i":"custom-controller-support","l":"\uD83C\uDFAE Custom Controller Support","p":["If you want to use your own custom Player Controller, make sure it contains the logic from BP_PC_Menu:","f you use your own controller make sure to add this to the BP_GM_Menu","This logic is well-commented and easy to migrate."]},{"i":"example-using-your-own-map","l":"\uD83D\uDCE6 Example: Using Your Own Map","p":["If you’re not using the provided Demo_MenuLevel, here’s what you must do:","Set GameMode Override to GM_Menu wich contains all the logic needed to get the menu working","Copy the logic you see in the level blueprint to achieve the same result. Level Blueprint Screenshot"]},{"i":"customizing-the-menu","l":"\uD83C\uDFA8 Customizing the Menu","p":["All widgets are located in:\uD83D\uDCC1 Widgets/Menu","You can:","Modify layout and style","Replace the logo or background","Add new buttons (like Credits or Continue)","Change audio or animations","\uD83D\uDCDD Everything is well strcutured for easy access","Need help with the setup? Ask on Discord"]}],[{"l":"Interaction System","p":["BFLite includes a modular and flexible interaction system to handle all player interactions like picking up items, opening doors, triggering events, and more."]},{"i":"base-class-bp-interaction-master","l":"\uD83E\uDDF1 Base Class: BP_Interaction_Master","p":["You’ll find this blueprint in:\uD83D\uDCC1 Blueprints/Actors/BP_Interaction_Master","This actor already has everything wired up for interaction. You can create a child class from it to start building interactables immediately — no extra setup needed.","BP_Interaction_Master in Folder Creating Child actor"]},{"i":"creating-your-own-interactable","l":"\uD83E\uDDE9 Creating Your Own Interactable","p":["If you prefer to build something from scratch, here’s what you need:","Create a new Actor","Add the interface: BPI_Interaction","Implement the OnInteract event — this will be called when the player interacts with the object. ** And boom, your done **","Setting up interface"]},{"i":"collision-setup-important","l":"\uD83D\uDCCC Collision Setup (Important)","p":["To make sure your object can be interacted with, you must enable the correct collision settings, see example above.","Setting up collision first method","Setting up collision second method","\uD83D\uDED1 Don’t forget: this is the core logic hook. If you skip OnInteract, nothing will happen when the player interacts."]}],[{"l":"Inspection System","p":["The inspection system lets players pick up and examine items in 3D with smooth rotation, scaling, and description support — just like you'd expect in modern narrative games."]},{"l":"The demo levels provide 3 examples you can do with this system and you can directly see how its made"},{"i":"getting-started","l":"\uD83C\uDFAC Getting Started","p":["To use it, simply drag in BP_Inspection_Master into your scene.","\uD83D\uDCC1 Path: Blueprints/Actors/Inspection/BP_Inspection_Master","No extra setup is required. You configure everything directly in the Details Panel."]},{"i":"customizing-the-item","l":"⚙️ Customizing the Item","p":["Adjusts the spawn offset of the item","Controls the mesh's local scale in the world","Default rotation when the player starts inspecting","Description","Description Text","Display Name","Inspection Details","Inspection Item Scale","Inspection Rotation","Item Location","Item Size","Moves the interaction widget location in the world","Name shown in the UI when the player inspects the item","Once placed in your level, all interaction settings are available under the Inspection Settings section:","Optional flavor text or lore","Scale applied to the object while in inspection mode","Setting","Static Mesh","The item mesh players will rotate/inspect","Widget Location"]},{"i":"notes","l":"\uD83D\uDCA1 Notes","p":["For note to display text make sure you attached the material to the existing mesh for it to work!","\uD83D\uDCAC Questions or custom inspection ideas? Ask in the Discord Server"]}],[{"l":"Footstep Sound System","p":["BFLite uses physical materials to determine footstep sounds. This lets you play different sounds when walking on surfaces like wood, metal, grass, and more — all based on Unreal Engine's surface types."]},{"i":"adding-a-new-surface-type","l":"➕ Adding a New Surface Type","p":["Go to Project Settings → Physics → Physical Surface","Click the + icon and give your new surface a name (e.g., Snow, Carpet, etc.)","Physical Surface in Project Settings"]},{"i":"create-a-physical-material","l":"\uD83E\uDDF1 Create a Physical Material","p":["Go to: Content/BFLite/Materials/Physical","Create a new Physical Material(or duplicate an existing one)","In the material details, set the Surface Type to your new surface","\uD83D\uDCCC This links your physical material to the trace logic used by footsteps"]},{"i":"changes-on-character-bp","l":"\uD83E\uDDE0 Changes on Character BP","p":["Open BP_Character_Base","Navigate to the function: FootstepTrace","Right-click on the EPhysicalSurface enum and Refresh Nodes","Find your new surface and add the correct location and sound","Attach your custom footstep sound to the Play sound at location Copy the same logic as the other surfaces","\uD83D\uDCA1 You can follow the structure used for existing materials to keep things clean."]},{"i":"example-use-case","l":"✅ Example Use Case","p":["Want footsteps to crunch in snow or squish in mud? Just create the physical material, add a sound, and link it!","\uD83D\uDCAC Still unsure? Show your Blueprint or ask for help on the Discord Server"]}],[{"i":"door--light-system","l":"Door & Light System","p":["BFLite includes a plug-and-play system for interactable doors, lights, and light switches. Everything is handled via exposed variables in the Details panel — no coding required."]},{"i":"doors","l":"\uD83D\uDEAA Doors","p":["Drag BP_Door_Master into your scene.","Build your door frame and mesh by adjusting the Details panel.","Use the toggles to:","Set whether the door starts open or closed","Invert rotation direction if needed","\uD83D\uDCCD You’ll find this actor in:\uD83D\uDCC1 Blueprints/Actors/Doors/BP_Door_Master","Door Setup Screenshot"]},{"i":"lights","l":"\uD83D\uDCA1 Lights","p":["Drag BP_Light_Master into your scene.","Tweak intensity, radius, cone angle, mesh, and color directly in the Details panel.","Set whether the light starts ON or OFF.","\uD83D\uDCCD You’ll find this actor in:\uD83D\uDCC1 Blueprints/Actors/Lights/BP_Light_Master","Light Setup Screenshot"]},{"i":"light-switches","l":"\uD83D\uDD0C Light Switches","p":["Drag BP_Lightswitch_Master into the level.","Select which lights it controls by adding references to the array in the panel.","Only BP_Light_Master or its child blueprints are allowed here.","Controll all attached lights with a single switch.","\uD83D\uDCCD You’ll find this actor in:\uD83D\uDCC1 Blueprints/Actors/Lights/BP_Lightswitch","Light Switch Screenshot","⚠️ The system is modular. Add multiple lights to a single switch or control each light individually."]},{"i":"summary","l":"\uD83D\uDCDD Summary","p":["All actors are fully adjustable from the Details Panel","Just drag, place, and tweak — no Blueprint editing required","Perfect for horror games, exploration, and puzzle mechanics","Need help wiring this with custom triggers? Ask in our Discord Server"]}],[{"i":"event-maker","l":"\uD83C\uDF9B️ Event Maker","p":["The Event Maker system allows you to trigger in-game actions such as moving objects, toggling lights, or opening/closing doors — all without writing code."]},{"i":"event-type-selection","l":"\uD83D\uDD18 Event Type Selection","p":["Start by selecting an event type from the dropdown list:","Transform– Move, rotate, or scale any actor","Door– Toggle a door open or closed","Lights– Toggle light actors on or off"]},{"i":"transform-event","l":"\uD83D\uDD01 Transform Event","p":["Transform Settings","What it does: Moves, rotates, or scales any actor you assign.","Setup Steps:","Make sure the actor you are trying to move is set to Moveable in the details panel.","Choose your actor.","Set the desired Location, Rotation, and Scale.","Enable Smooth? for a gradual animation, or leave it off for instant.","Set Transform Duration (Sec) if smooth is enabled.","Optionally enable Destroy on Finish? if the actor should be removed after.","Add an optional 2D or 3D sound to play during the event."]},{"i":"door-event","l":"\uD83D\uDEAA Door Event","p":["Door Settings","Toggles a door open or closed.","Select your BP_Door actor.","Add a Delay if needed.","Automatically switches state (no need to specify \"open\" or \"close\")."]},{"i":"light-event","l":"\uD83D\uDCA1 Light Event","p":["Light Settings","Toggles light actors on or off.","Select your BP_Light actor.","Add a Delay if needed.","Automatically toggles state based on the current light state.","\uD83D\uDD04 This system is designed to be simple and mistake-proof — no need to manage states manually."]}],[{"l":"Frequently Asked Questions","p":["Here are answers to the most commonly asked questions about the BFLite Framework."]},{"i":"what-versions-does-it-support","l":"\uD83D\uDE80 What versions does it support?","p":["BFLite is compatible with Unreal Engine 5.4 and above. If there is an audience for older versions, we can consider adding support for them."]},{"i":"does-bflite-stay-free","l":"\uD83D\uDCB8 Does BFLite stay free?","p":["Yes. We have no intent to make this a paid framework. It will remain free and updated based on community feedback and new ideas."]},{"i":"will-there-be-new-features","l":"✨ Will there be new features?","p":["Absolutely! We plan to keep updating the framework after release. We also plan on releasing premium version of existing features as well as new components you can get seperate to add on"]},{"i":"how-do-i-add-new-footstep-sounds","l":"\uD83D\uDC63 How do I add new footstep sounds?","p":["Add new surface types in Project Settings under Physical Surface, create a matching physical material, and hook it up inside FootstepTrace in BP_Character_Base."]},{"i":"-how-do-i-create-custom-interactable-actors","l":"\uD83D\uDEE0 How do I create custom interactable actors?","p":["Either use BP_Interaction_Master as a base or create a new actor and add the BPI_Interaction interface. Don’t forget to implement OnInteract."]},{"i":"can-i-combine-different-events-with-the-event-maker","l":"\uD83D\uDD00 Can I combine different events with the Event Maker?","p":["Yes, you can use multiple event makers into the world to create complex scenes, a good example is the ending of the demo map"]},{"i":"what-if-my-actor-doesn-t-respond-to-interaction","l":"❌ What if my actor doesn’t respond to interaction?","p":["Make sure collision is set to block the interaction trace and that OnInteract is implemented."]},{"i":"can-i-fully-customize-the-menu-layout-and-ui","l":"\uD83C\uDFA8 Can I fully customize the menu layout and UI?","p":["Yes. All widgets are located in Widgets/Menu and are commented for easy editing."]},{"i":"where-can-i-get-help-or-share-ideas","l":"\uD83D\uDCAC Where can I get help or share ideas?","p":["Join our Discord server for support, feedback, or suggestions.","Or contact us at support@breakboundstudios.com"]},{"i":"are-all-assets-provided-free-to-use","l":"\uD83D\uDCC1 Are all assets provided free to use?","p":["Yes! All assets provided with the framework are free to use in your own projects."]},{"i":"can-i-add-this-framework-to-an-existing-project","l":"\uD83D\uDD0C Can I add this framework to an existing project?","p":["Yes, you can! However, we currently do not have an integration tutorial available — stay tuned!"]}]]